<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kanban Task Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/js-confetti@latest/dist/js-confetti.browser.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .kanban-column {
            min-height: 400px;
        }
        .task {
            cursor: grab;
            transition: background-color 0.2s ease;
        }
        .task:active {
            cursor: grabbing;
        }
        .task.dragging {
            opacity: 0.5;
            border: 2px dashed #4f46e5;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900">Kanban Board</h1>
            <p class="text-gray-600 mt-2">Organize your workflow and celebrate your progress!</p>
            <div id="auth-info" class="mt-4 text-sm text-gray-500">
                <p>Loading user data...</p>
            </div>
        </header>

        <!-- Task Input Form -->
        <div class="max-w-xl mx-auto bg-white p-6 rounded-xl shadow-md mb-12">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Add a New Task</h2>
            <form id="add-task-form" class="flex flex-col sm:flex-row gap-4">
                <input type="text" id="task-input" placeholder="Enter a new task..." class="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition" required>
                <button type="submit" class="bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 shadow">
                    Add Task
                </button>
            </form>
        </div>

        <!-- Kanban Board -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            <!-- To Do Column -->
            <div id="todo" class="kanban-column bg-white rounded-xl shadow-md p-4" data-status="todo">
                <h2 class="text-xl font-bold mb-4 pb-2 border-b-4 border-red-400 text-center text-red-700">To Do</h2>
                <div id="todo-tasks" class="task-list space-y-4">
                    <!-- Tasks will be dynamically inserted here -->
                </div>
            </div>

            <!-- In Progress Column -->
            <div id="inprogress" class="kanban-column bg-white rounded-xl shadow-md p-4" data-status="inprogress">
                <h2 class="text-xl font-bold mb-4 pb-2 border-b-4 border-yellow-400 text-center text-yellow-700">In Progress</h2>
                <div id="inprogress-tasks" class="task-list space-y-4">
                    <!-- Tasks will be dynamically inserted here -->
                </div>
            </div>

            <!-- Done Column -->
            <div id="done" class="kanban-column bg-white rounded-xl shadow-md p-4" data-status="done">
                <h2 class="text-xl font-bold mb-4 pb-2 border-b-4 border-green-400 text-center text-green-700">Done</h2>
                <div id="done-tasks" class="task-list space-y-4">
                    <!-- Tasks will be dynamically inserted here -->
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection, addDoc, updateDoc, deleteDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "YOUR_API_KEY", authDomain: "...", projectId: "..." };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-kanban-app';

        // --- Initialize Firebase ---
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // --- JS-Confetti Initialization ---
        const jsConfetti = new JSConfetti();

        // --- Global State ---
        let userId = null;
        let tasksCollectionRef = null;

        // --- Authentication ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                // User is signed in.
                userId = user.uid;
                const authInfo = document.getElementById('auth-info');
                authInfo.innerHTML = `<p>User ID: <span class="font-mono bg-gray-200 px-2 py-1 rounded">${userId}</span></p>`;
                
                // Set up Firestore collection reference for the user
                tasksCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/tasks`);
                
                // Start listening for task updates
                listenForTasks();

            } else {
                // User is signed out.
                console.log("User is not signed in. Attempting to sign in.");
                const authInfo = document.getElementById('auth-info');
                authInfo.innerHTML = `<p>Signing in...</p>`;
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                        await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Error during sign-in:", error);
                    authInfo.innerHTML = `<p class="text-red-500">Authentication failed. Please refresh.</p>`;
                }
            }
        });

        // --- DOM Elements ---
        const addTaskForm = document.getElementById('add-task-form');
        const taskInput = document.getElementById('task-input');
        const columns = document.querySelectorAll('.kanban-column');

        // --- Task Rendering ---
        const renderTasks = (tasks) => {
            // Clear existing tasks from all columns
            document.getElementById('todo-tasks').innerHTML = '';
            document.getElementById('inprogress-tasks').innerHTML = '';
            document.getElementById('done-tasks').innerHTML = '';

            tasks.forEach(task => {
                const taskElement = document.createElement('div');
                taskElement.id = task.id;
                taskElement.draggable = true;
                taskElement.className = 'task bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200 flex justify-between items-center';
                
                const taskText = document.createElement('p');
                taskText.textContent = task.text;
                taskText.className = 'text-gray-800';
                
                const deleteButton = document.createElement('button');
                deleteButton.innerHTML = '&times;';
                deleteButton.className = 'text-red-500 font-bold text-xl hover:text-red-700 transition-colors';
                deleteButton.onclick = () => deleteTask(task.id);

                taskElement.appendChild(taskText);
                taskElement.appendChild(deleteButton);

                // Add drag event listeners
                taskElement.addEventListener('dragstart', handleDragStart);

                // Append to the correct column
                const containerId = `${task.status}-tasks`;
                const container = document.getElementById(containerId);
                if (container) {
                    container.appendChild(taskElement);
                } else {
                    console.warn(`Container with id ${containerId} not found.`);
                }
            });
        };
        
        // --- Firestore Listener ---
        const listenForTasks = () => {
            if (!tasksCollectionRef) return;
            onSnapshot(tasksCollectionRef, (snapshot) => {
                const tasks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderTasks(tasks);
            }, (error) => {
                console.error("Error fetching tasks:", error);
            });
        };

        // --- Add Task ---
        addTaskForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const taskText = taskInput.value.trim();
            if (taskText && userId) {
                try {
                    await addDoc(tasksCollectionRef, {
                        text: taskText,
                        status: 'todo',
                        createdAt: serverTimestamp()
                    });
                    taskInput.value = '';
                } catch (error) {
                    console.error("Error adding task: ", error);
                }
            }
        });
        
        // --- Delete Task ---
        const deleteTask = async (taskId) => {
            if (!userId) return;
            const taskDocRef = doc(db, `artifacts/${appId}/users/${userId}/tasks`, taskId);
            try {
                await deleteDoc(taskDocRef);
            } catch (error) {
                console.error("Error deleting task:", error);
            }
        };

        // --- Drag and Drop Logic ---
        let draggedTaskId = null;

        function handleDragStart(e) {
            draggedTaskId = e.target.id;
            e.target.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
        }

        columns.forEach(column => {
            column.addEventListener('dragover', (e) => {
                e.preventDefault(); // Necessary to allow dropping
                e.dataTransfer.dropEffect = 'move';
                column.classList.add('bg-gray-200');
            });

            column.addEventListener('dragleave', (e) => {
                column.classList.remove('bg-gray-200');
            });
            
            column.addEventListener('dragend', (e) => {
                 const draggingElement = document.querySelector('.dragging');
                 if(draggingElement) {
                    draggingElement.classList.remove('dragging');
                 }
            });

            column.addEventListener('drop', async (e) => {
                e.preventDefault();
                column.classList.remove('bg-gray-200');
                const draggedElement = document.querySelector('.dragging');
                if (draggedElement) {
                    draggedElement.classList.remove('dragging');
                }


                if (draggedTaskId) {
                    const newStatus = column.dataset.status;
                    const taskDocRef = doc(db, `artifacts/${appId}/users/${userId}/tasks`, draggedTaskId);
                    
                    try {
                        await updateDoc(taskDocRef, {
                            status: newStatus
                        });

                        // If moved to 'Done', trigger confetti
                        if (newStatus === 'done') {
                            jsConfetti.addConfetti({
                                emojis: ['🎉', '🎊', '✨', '🥳', '✅'],
                                emojiSize: 50,
                                confettiNumber: 50,
                            });
                        }
                    } catch (error) {
                        console.error("Error updating task status:", error);
                    }
                    
                    draggedTaskId = null;
                }
            });
        });

    </script>
</body>
</html>